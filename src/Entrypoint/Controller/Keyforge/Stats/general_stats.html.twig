{% extends "Keyforge/Shared/keyforge_base.html.twig" %}

{% block title %}Keyforge{% endblock %}

{% block body %}
    <div class="shadow-lg p-3 mb-3 bg-white rounded">
        <div class="row m-3">
            <div class="col-12 col-lg-4">
                <canvas id="housePresence"></canvas>
            </div>
            <div class="col-12 col-lg-4">
                <canvas id="setPresence"></canvas>
            </div>
            <div class="col-12 col-lg-4">
                <canvas id="avgStatsBySet"></canvas>
            </div>
        </div>

        <div class="divider py-2"></div>
        <div class="divider py-2"></div>

        <div class="row m-3">
            <h4>{{ 'data.win_rate'|trans }}</h4>
            <div class="divider py-1"></div>

            <div class="col-12 col-lg-6">
                <canvas id="wrSet"></canvas>
            </div>
            <div class="col-12 col-lg-6">
                <canvas id="wrSas"></canvas>
            </div>
        </div>
        <div class="divider py-2"></div>

        <div class="row m-3">
            <div class="col-12 col-lg-12">
                <canvas id="wrHouse"></canvas>
            </div>
        </div>
    </div>

    {% if is_granted('ROLE_KEYFORGE') %}
        <div class="shadow-lg p-3 mb-3 bg-white rounded">
            <div class="row">
                {% for i in 0..1 %}
                    <div class="col-6">
                        <div class="row">
                            <div class="col-6">
                                <span>{{ 'menu.decks_from'|trans }}</span>
                                <select id="collection_comparison_from_{{ i }}" class="form-select compare_collection_select" data-index="{{ i }}">
                                    <option value="{{ app.user.id }}" {% if i == 0 %}selected{% endif %}>{{ 'menu.you'|trans }}</option>
                                    <option value="friends" {% if i == 1 %}selected{% endif %}>{{ 'menu.friends'|trans }}</option>
                                    <option value="all">{{ 'deck_comparison.all'|trans }}</option>
                                    {% for id,friend in indexed_friends %}
                                        <option value="{{ id }}">{{ friend }}</option>
                                    {% endfor %}
                                </select>
                            </div>
                            <div class="col-6">
                                <span>{{ 'menu.stat'|trans }}</span>
                                <select id="collection_comparison_stat_{{ i }}" class="form-select compare_collection_select" data-index="{{ i }}">
                                    <option value="sas" selected>{{ 'deck.sas'|trans }}</option>
                                    <option value="expectedAmber">{{ 'deck.expected_amber'|trans }}</option>
                                    <option value="amberControl">{{ 'deck.amber_control'|trans }}</option>
                                    <option value="creatureControl">{{ 'deck.creature_control'|trans }}</option>
                                    <option value="artifactControl">{{ 'deck.artifact_control'|trans }}</option>
                                    <option value="efficiency">{{ 'deck.efficiency'|trans }}</option>
                                    <option value="recursion">{{ 'deck.recursion'|trans }}</option>
                                    <option value="disruption">{{ 'deck.disruption'|trans }}</option>
                                    <option value="effectivePower">{{ 'deck.effective_power'|trans }}</option>
                                    <option value="creatureProtection">{{ 'deck.creature_protection'|trans }}</option>
                                    <option value="totalArmor">{{ 'deck.total_armor'|trans }}</option>
                                    <option value="creatureCount">{{ 'deck.creature_count'|trans }}</option>
                                    <option value="actionCount">{{ 'deck.action_count'|trans }}</option>
                                    <option value="artifactCount">{{ 'deck.artifact_count'|trans }}</option>
                                    <option value="upgradeCount">{{ 'deck.upgrade_count'|trans }}</option>
                                    <option value="keyCheatCount">{{ 'deck.key_cheat_count'|trans }}</option>
                                    <option value="cardArchiveCount">{{ 'deck.card_archive_count'|trans }}</option>
                                    <option value="boardClearCount">{{ 'deck.board_clear_count'|trans }}</option>
                                    <option value="scalingAmberControlCount">{{ 'deck.scaling_amber_control_count'|trans }}</option>
                                    <option value="rawAmber">{{ 'deck.raw_amber'|trans }}</option>
                                    <option value="aercScore">{{ 'deck.aerc_score'|trans }}</option>
                                    <option value="synergyRating">{{ 'deck.synergy'|trans }}</option>
                                    <option value="antiSynergyRating">{{ 'deck.antisynergy'|trans }}</option>
                                </select>
                            </div>
                            <div class="col-6 mt-2">
                                <span>{{ 'menu.amount'|trans }}</span>
                                <select id="collection_comparison_amount_{{ i }}" class="form-select compare_collection_select" data-index="{{ i }}">
                                    <option value="5">5</option>
                                    <option value="10" selected>10</option>
                                    <option value="25">25</option>
                                    <option value="50">50</option>
                                </select>
                            </div>
                            <div class="col-6 mt-2">
                                <span>{{ 'menu.set'|trans }}</span>
                                <select id="collection_comparison_set_{{ i }}" class="form-select compare_collection_select" data-index="{{ i }}">
                                    <option value="all" selected>{{ 'menu.all'|trans }}</option>
                                    <option value="CotA">CotA</option>
                                    <option value="AoA">AoA</option>
                                    <option value="WC">WC</option>
                                    <option value="MM">MM</option>
                                    <option value="DT">DT</option>
                                    <option value="WoE">WoE</option>
                                    <option value="GR">GR</option>
                                    <option value="AS">AS</option>
                                    <option value="U22">U22</option>
                                    <option value="M24">M24</option>
                                    <option value="VM23">VM23</option>
                                    <option value="VM24">VM24</option>
                                </select>
                            </div>

                            <div class="col-12 mt-2">
                                <span>{{ 'menu.deck_type'|trans }}</span>
                                <select id="collection_comparison_decktype_{{ i }}" class="form-select compare_collection_select" data-index="{{ i }}">
                                    <option value="all">{{ 'menu.all'|trans }}</option>
                                    <option value="STANDARD" selected>{{ 'menu.deck_type_archon'|trans }}</option>
                                    <option value="ALLIANCE">{{ 'menu.deck_type_alliance'|trans }}</option>
                                    <option value="THEORETICAL">{{ 'menu.deck_type_theoretical'|trans }}</option>
                                </select>
                            </div>
                        </div>
                    </div>
                {% endfor %}
            </div>
            <div class="row">
                {% for i in 0..1 %}
                    <div class="col-6">
                        <div class="row">
                            <div class="col-12">
                                <table class="table table-hover" id="collection_comparison_table_{{ i }}">
                                    <thead>
                                    <tr>
                                        <th>{{ 'menu.deck'|trans }}</th>
                                        <th></th>
                                    </tr>
                                    </thead>
                                    <tbody></tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                {% endfor %}
            </div>
        </div>
    {% endif %}

    <script>
        let housePresence = JSON.parse('{{ houses|json_encode|raw }}');
        let setPresence = JSON.parse('{{ sets|json_encode|raw }}');
        let wrSet = JSON.parse('{{ wrBySet|json_encode|raw }}');
        let wrHouse = JSON.parse('{{ wrByHouse|json_encode|raw }}');
        let wrSas = JSON.parse('{{ wrBySas|json_encode|raw }}');
        let avgStatsBySet = JSON.parse('{{ avgStatsBySet|json_encode|raw }}');

        const houseColors = [
            'rgb(231, 76, 60)',  //Brobnar
            'rgb(225, 78, 183)', //Dis
            'rgb(177, 29, 33)',  //Ekwidon
            'rgb(37, 41, 33)', //Geistoid
            'rgb(52, 152, 219)', //Logos
            'rgb(46, 204, 113)', //Mars
            'rgb(41, 128, 185)', //Sanctum
            'rgb(22, 160, 133)', //Saurian
            'rgb(81, 90, 90)',   //Shadows
            'rgb(125, 60, 152)', //Star Alliance
            'rgb(21, 67, 96)',   //Unfathomable
            'rgb(20, 90, 50)',   //Untamed
        ];

        const setColors = [
            'rgb(52, 152, 219)', //AoA
            'rgb(231, 76, 60)',  //CotA
            'rgb(7,70,113)',  //DT
            'rgb(37, 41, 33)', //GR
            'rgb(22, 160, 133)', //MM
            'rgb(133,128,128)', //U22
            'rgb(133,128,128)', //VM23
            'rgb(125, 60, 152)', //WC
            'rgb(177, 29, 33)',  //WoE
        ];

        graph('housePresence', '{{ 'deck.houses'|trans }}', housePresence, houseColors);
        graph('setPresence', '{{ 'deck.sets'|trans }}', setPresence, setColors);
        graph2('wrSet', wrSet, '{{ 'data.by_set'|trans }}', 2);
        graph2('wrHouse', wrHouse, '{{ 'data.by_house'|trans }}', 4);
        graph2('wrSas', wrSas, '{{ 'data.by_sas'|trans}}', 2);
        graph3('avgStatsBySet', avgStatsBySet, '{{ 'data.stats_by_set'|trans}}', 1);

        function graph(id, title, data, colors) {
            new Chart(document.getElementById(id).getContext('2d'), {
                type: 'doughnut',
                data: {
                    labels: Object.keys(data),
                    datasets: [
                        {
                            data: Object.values(data),
                            borderColor: 'rgb(255,255,255)',
                            backgroundColor: colors,
                        },
                    ]
                },
                options: {
                    responsive: true,
                    aspectRatio: 1.2,
                    plugins: {
                        legend: {
                            display: false,
                            position: 'bottom',
                        },
                        title: {
                            display: true,
                            text: title,
                        }
                    }
                },
            });
        }

        function graph2(id, data, title, ratio) {
            let wins = [];
            let losses = [];
            let wr = [];

            for (const [key, value] of Object.entries(data)) {
                wins.push(data[key].wins);
                losses.push(data[key].losses);
                wr.push(data[key].winrate);
            }

            new Chart(document.getElementById(id).getContext('2d'), {
                type: 'bar',
                data: {
                    labels: Object.keys(data),
                    datasets: [
                        {
                            label: '{{ 'data.wins'|trans }}',
                            data: wins,
                            borderColor: '#688f4e',
                            backgroundColor: '#688f4e',
                        },
                        {
                            label: '{{ 'data.losses'|trans }}',
                            data: losses,
                            borderColor: '#d53302',
                            backgroundColor: '#d53302',
                        },
                        {
                            label: '{{ 'data.win%_rate'|trans }}',
                            data: wr,
                            borderColor: '#3a6383',
                            backgroundColor: '#3a6383',
                            yAxisID: 'percentage',
                        },
                    ],
                },
                options: {
                    responsive: true,
                    aspectRatio: ratio,
                    plugins: {
                        legend: {
                            display: true,
                            position: 'bottom',
                        },
                        title: {
                            display: true,
                            text: title,
                        }
                    },
                    scale: {
                        ticks: {
                            precision: 0,
                        },
                    },
                    scales: {
                        wins: {
                            type: 'linear',
                            display: true,
                            position: 'left',
                            grid: {
                                drawOnChartArea: true,
                            },
                            stacked: false,
                        },
                        percentage: {
                            type: 'linear',
                            display: true,
                            position: 'right',
                            min: 0,
                            max: 100,
                            grid: {
                                drawOnChartArea: false,
                            },
                            stacked: false,
                        },
                    },
                },
            });
        }

        function graph3(id, data, title, ratio) {
            let expectedAmber = [];
            let creatureControl = [];
            let amberControl = [];
            let artifactControl = [];
            let creatureProtection = [];
            let disruption = [];
            let efficiency = [];
            let recursion = [];

            for (const [key, value] of Object.entries(data)) {
                expectedAmber.push(data[key].avg_expected_amber);
                creatureControl.push(data[key].avg_creature_control);
                amberControl.push(data[key].avg_amber_control);
                artifactControl.push(data[key].avg_artifact_control);
                creatureProtection.push(data[key].avg_creature_protection);
                disruption.push(data[key].avg_disruption);
                efficiency.push(data[key].avg_efficiency);
                recursion.push(data[key].avg_recursion);
            }

            new Chart(document.getElementById(id).getContext('2d'), {
                type: 'radar',
                data: {
                    labels: Object.keys(data),
                    datasets: [
                        {
                            label: '{{ 'deck.expected_amber'|trans }}',
                            data: expectedAmber,
                            borderColor: '#eac40d',
                        },
                        {
                            label: '{{ 'deck.creature_control'|trans }}',
                            data: creatureControl,
                            borderColor: '#ff0e0e',
                        },
                        {
                            label: '{{ 'deck.amber_control'|trans }}',
                            data: amberControl,
                            borderColor: '#2023c1',
                        },
                        {
                            label: '{{ 'deck.artifact_control'|trans }}',
                            data: artifactControl,
                            borderColor: '#1bd84f',
                        },
                        {
                            label: '{{ 'deck.creature_protection'|trans }}',
                            data: creatureProtection,
                            borderColor: '#858080',
                        },
                        {
                            label: '{{ 'deck.disruption'|trans }}',
                            data: disruption,
                            borderColor: '#6e3030',
                        },
                        {
                            label: '{{ 'deck.efficiency'|trans }}',
                            data: efficiency,
                            borderColor: '#25bde6',
                        },
                        {
                            label: '{{ 'deck.recursion'|trans }}',
                            data: recursion,
                            borderColor: '#c934cc',
                        },
                    ],
                },
                options: {
                    responsive: true,
                    aspectRatio: ratio,
                    plugins: {
                        legend: {
                            display: true,
                            position: 'bottom',
                        },
                        title: {
                            display: true,
                            text: title,
                        }
                    },
                    scale: {
                        ticks: {
                            precision: 0,
                        },
                    },
                },
            });
        }

        {% if is_granted('ROLE_KEYFORGE') %}
        initDecks();

        $('.compare_collection_select').change(function (e) {
            const index = $(e.currentTarget).data('index');

            fetchDecks(
                index,
                $('#collection_comparison_set_' + index)[0].value,
                $('#collection_comparison_from_' + index)[0].value,
                $('#collection_comparison_amount_' + index)[0].value,
                $('#collection_comparison_stat_' + index)[0].value,
                $('#collection_comparison_decktype_' + index)[0].value,
            );
        });

        function initDecks() {
            fetchDecks(0, 'all', '{{ app.user.id }}', 10, 'sas', 'STANDARD');
            fetchDecks(1, 'all', 'friends', 10, 'sas', 'STANDARD');
        }

        function fetchDecks(index, set, owners, amount, stat, decktype) {
            let data = {
                extraFilterMinSas: 30,
                length: amount,
            };

            if (set !== 'all') {
                data.extraFilterSet = [set];
            }

            if (decktype !== 'all') {
                data.extraFilterDeckTypes = [decktype];
            }

            if (owners !== null && owners.length === 36) {
                data.extraFilterOwners = [owners];
            }

            if (owners !== null && owners === 'friends') {
                let friends = JSON.parse('{{ indexed_friends|json_encode|raw }}');

                data.extraFilterOwners = Object.keys(friends).filter((friend) => friend !== '{{ app.user.id }}');
            }

            const orderFields = {
                sas: 5,
                amberControl: 6,
                expectedAmber: 7,
                artifactControl: 8,
                creatureControl: 9,
                efficiency: 10,
                recursion: 11,
                disruption: 12,
                effectivePower: 13,
                creatureProtection: 14,
                totalArmor: 15,
                creatureCount: 16,
                actionCount: 17,
                artifactCount: 18,
                upgradeCount: 19,
                keyCheatCount: 20,
                cardArchiveCount: 21,
                boardClearCount: 22,
                scalingAmberControlCount: 23,
                rawAmber: 24,
                aercScore: 25,
                synergyRating: 26,
                antiSynergyRating: 27,
            };

            data.order = [{column: orderFields[stat], dir: 'desc'}];

            $('#collection_comparison_table_' + index + ' > tbody').empty();

            const spinner = '<div class="spinner-border text-dark" role="status"><span class="sr-only"></span></div>';

            $('#collection_comparison_table_' + index + ' > tbody').append(spinner);

            $.ajax({
                type: 'GET',
                url: '{{ path('keyforge_decks_json') }}',
                data: data,
            }).done(function(data) {
                renderDecks(index, stat, data.data)
            }).fail(function() {
            });
        }

        function renderDecks(index, stat, decks) {
            $('#collection_comparison_table_' + index + ' > tbody').empty();

            decks.forEach(function (deck) {
                let deckStat = deck.stats[stat];

                let url = '{{ path('keyforge_deck_detail', {'deckId': '-replace-'}) }}';
                url = url.replace('-replace-', deck.id);

                let line = '<tr><td><a href="' + url + '">' + deck.name + '</a></td><td>' + deckStat + '</td></tr>';

                $('#collection_comparison_table_' + index + ' > tbody').append(line);
            });
        }
        {% endif %}
    </script>
{% endblock %}
