{% extends "Keyforge/Shared/keyforge_base.html.twig" %}

{% block title %}Keyforge{% endblock %}

{% block body %}
    {% if userData is not null %}
        <div class="shadow-lg p-3 mb-5 bg-white rounded">
            <div class="row">
                <div class="col-3">
                    <select class="form-control deck_stat_comparison_select" name="deckComparisonVs1" id="deckComparisonVs1" disabled>
                        <option value="user" selected>{{ 'menu.you'|trans }}</option>
                        <option value="friends" disabled>{{ 'menu.friends'|trans }}</option>
                        <option value="all" disabled>{{ 'menu.all'|trans }}</option>
                    </select>
                </div>
                <div class="col-3">
                vs
                </div>
                <div class="col-3">
                    <select class="form-control deck_stat_comparison_select" name="deckComparisonVs2" id="deckComparisonVs2">
                        <option value="user" disabled>{{ 'menu.you'|trans }}</option>
                        <option value="friends">{{ 'menu.friends'|trans }}</option>
                        <option value="all" selected>{{ 'menu.all'|trans }}</option>
                    </select>
                </div>
                <div class="col-3">
                    <select class="form-control deck_stat_comparison_select" name="deckComparisonStat" id="deckComparisonStat">
                        <option value="sas" selected>{{ 'deck_comparison.sas'|trans }}</option>
                        <option value="expectedAmber">{{ 'deck_comparison.expectedAmber'|trans }}</option>
                        <option value="amberControl">{{ 'deck_comparison.amberControl'|trans }}</option>
                        <option value="creatureControl">{{ 'deck_comparison.creatureControl'|trans }}</option>
                        <option value="artifactControl">{{ 'deck_comparison.artifactControl'|trans }}</option>
                        <option value="effectivePower">{{ 'deck_comparison.effectivePower'|trans }}</option>
                        <option value="efficiency">{{ 'deck_comparison.efficiency'|trans }}</option>
                        <option value="disruption">{{ 'deck_comparison.disruption'|trans }}</option>
                        <option value="recursion">{{ 'deck_comparison.recursion'|trans }}</option>
                        <option value="other">{{ 'deck_comparison.other'|trans }}</option>
                        <option value="aerc">{{ 'deck_comparison.aerc'|trans }}</option>
                        <option value="synergy">{{ 'deck_comparison.synergy'|trans }}</option>
                        <option value="bonusAmber">{{ 'deck_comparison.bonusAmber'|trans }}</option>
                        <option value="creatureCount">{{ 'deck_comparison.creatureCount'|trans }}</option>
                        <option value="artifactCount">{{ 'deck_comparison.artifactCount'|trans }}</option>
                    </select>
                </div>
            </div>
            <div class="divider py-3"></div>
            <div class="row">
                {% for userScope,byUser in userData.deck_tops.by_stats %}
                {% for statScope,byStat in byUser %}
                    <div class=" col-12 col-lg-6 deck_stats_{{ userScope }}_{{ statScope }}_container deck_comparison_chart" style="display: none">
                        <canvas id="deck_stats_{{ userScope }}_{{ statScope }}" width="300" height="100"></canvas>
                        <table class="table table-hover">
                            <tr>
                                <td>Deck</td>
                                <td class="text-end">{{ ('deck_comparison.'~statScope)|trans }}</td>
                            </tr>
                            {% for deck in byStat|slice(0,10) %}
                            <tr>
                                <td>
                                    <a href="{{ path('keyforge_deck_detail', {'deckId': deck.id}) }}" target="_blank">{{ deck.name }}</a>
                                </td>
                                <td class="text-end">{{ deck.stats[statScope]|round(2) }}</td>
                            </tr>
                            {% endfor %}
                        </table>
                    </div>
                {% endfor %}
                {% endfor %}
            </div>
        </div>
    {% endif %}

    {% if data is not null %}
        <div class="shadow-lg p-3 mb-5 bg-white rounded">
            <div class="row">
                <div class="col-12 col-sm-6 col-lg-3">
                    <canvas id="setWins" width="400" height="400"></canvas>
                </div>
                <div class="col-12 col-sm-6 col-lg-3">
                    <canvas id="setWinRate" width="400" height="400"></canvas>
                </div>
                <div class="col-12 col-sm-6 col-lg-3">
                    <canvas id="setPickRate" width="400" height="400"></canvas>
                </div>
                <div class="col-12 col-sm-6 col-lg-3">
                    <canvas id="setPresence" width="400" height="400"></canvas>
                </div>
            </div>

            <div class="row mt-3">
                <div class="col-12 col-sm-6 col-lg-3">
                    <canvas id="houseWins" width="400" height="450"></canvas>
                </div>
                <div class="col-12 col-sm-6 col-lg-3">
                    <canvas id="houseWinRate" width="400" height="450"></canvas>
                </div>
                <div class="col-12 col-sm-6 col-lg-3">
                    <canvas id="housePickRate" width="400" height="450"></canvas>
                </div>
                <div class="col-12 col-sm-6 col-lg-3">
                    <canvas id="housePresence" width="400" height="400"></canvas>
                </div>
            </div>
        </div>
    {% endif %}

    <script>
        {% if data is not null %}
        let setPresence = JSON.parse('{{ data.set_presence|json_encode|raw }}');
        let housePresence = JSON.parse('{{ data.house_presence|json_encode|raw }}');
        let setWins = JSON.parse('{{ data.set_wins|json_encode|raw }}');
        let houseWins = JSON.parse('{{ data.house_wins|json_encode|raw }}');
        let setWinRate = JSON.parse('{{ data.set_win_rate|json_encode|raw }}');
        let houseWinRate = JSON.parse('{{ data.house_win_rate|json_encode|raw }}');
        let setPickRate = JSON.parse('{{ data.set_pick_rate|json_encode|raw }}');
        let housePickRate = JSON.parse('{{ data.house_pick_rate|json_encode|raw }}');

        const setPresenceChart = new Chart(document.getElementById('setPresence').getContext('2d'), {
            type: 'doughnut',
            data: {
                datasets: [{
                    data: Object.values(setPresence),
                    backgroundColor: [
                        'rgb(255, 99, 132)',  //CotA
                        'rgb(54, 162, 235)',  //AoA
                        'rgb(210, 145, 188)', //WC
                        'rgb(179, 217, 178)', //MM
                        'rgb(114, 99, 143)',  //DT
                        'rgb(177, 29, 33)',   //WoE
                        'rgb(51,19,67)',      //GR
                        'rgb(135,206,235)',   //AS
                        'rgb(10,73,204)',     //U22
                        'rgb(204,10,107)',    //M23
                        'rgb(255,215,0)',     //VM23
                        'rgb(255,145,0)',     //VM24
                    ],
                }],
                labels: Object.keys(setPresence),
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        display: false,
                        position: 'bottom',
                    },
                    title: {
                        display: true,
                        text: 'Sets'
                    }
                }
            },
        });

        const housePresenceChart = new Chart(document.getElementById('housePresence').getContext('2d'), {
            type: 'doughnut',
            data: {
                datasets: [{
                    data: Object.values(housePresence),
                    backgroundColor: [
                        'rgb(41, 128, 185)', //Sanctum
                        'rgb(225, 78, 183)', //Dis
                        'rgb(46, 204, 113)', //Mars
                        'rgb(125, 60, 152)', //Star Alliance
                        'rgb(22, 160, 133)', //Saurian
                        'rgb(81, 90, 90)',   //Shadows
                        'rgb(20, 90, 50)',   //Untamed
                        'rgb(231, 76, 60)',  //Brobnar
                        'rgb(21, 67, 96)',   //Unfathomable
                        'rgb(52, 152, 219)', //Logos
                        'rgb(177, 29, 33)',  //Ekwidon
                        'rgb(51,19,67)',     //Geistoid
                        'rgb(135,206,235)',  //Skyborn
                    ],
                }],
                labels: Object.keys(housePresence),
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        display: false,
                        position: 'bottom',
                    },
                    title: {
                        display: true,
                        text: '{{ 'menu.houses'|trans }}'
                    }
                }
            },
        });

        const setWinsChart = new Chart(document.getElementById('setWins').getContext('2d'), {
            type: 'bar',
            data: {
                labels: Object.keys(setWins),
                datasets: [
                    {
                        label: '{{ 'data.wins'|trans }}',
                        data: Object.values(setWins),
                        borderColor: 'rgb(37, 41, 33)',
                        backgroundColor: 'rgb(37, 41, 33)',
                    },
                ]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        display: false,
                        position: 'bottom',
                    },
                    title: {
                        display: true,
                        text: '{{ 'menu.house_wins'|trans }}'
                    }
                }
            },
        });

        const houseWinsChart = new Chart(document.getElementById('houseWins').getContext('2d'), {
            type: 'bar',
            data: {
                labels: Object.keys(houseWins),
                datasets: [
                    {
                        label: '{{ 'data.wins'|trans }}',
                        data: Object.values(houseWins),
                        borderColor: 'rgb(37, 41, 33)',
                        backgroundColor: 'rgb(37, 41, 33)',
                    },
                ]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        display: false,
                        position: 'bottom',
                    },
                    title: {
                        display: true,
                        text: '{{ 'menu.house_wins'|trans }}'
                    }
                }
            },
        });

        const setWinRateChart = new Chart(document.getElementById('setWinRate').getContext('2d'), {
            type: 'bar',
            data: {
                labels: Object.keys(setWinRate),
                datasets: [
                    {
                        label: '%',
                        data: Object.values(setWinRate),
                        borderColor: 'rgb(37, 41, 33)',
                        backgroundColor: 'rgb(37, 41, 33)',
                    },
                ]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        display: false,
                        position: 'bottom',
                    },
                    title: {
                        display: true,
                        text: '{{ 'menu.set_wr'|trans }}'
                    }
                }
            },
        });

        const houseWinRateChart = new Chart(document.getElementById('houseWinRate').getContext('2d'), {
            type: 'bar',
            data: {
                labels: Object.keys(houseWinRate),
                datasets: [
                    {
                        label: '%',
                        data: Object.values(houseWinRate),
                        borderColor: 'rgb(37, 41, 33)',
                        backgroundColor: 'rgb(37, 41, 33)',
                    },
                ]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        display: false,
                        position: 'bottom',
                    },
                    title: {
                        display: true,
                        text: '{{ 'menu.house_wr'|trans }}'
                    }
                }
            },
        });

        const setPickRateChart = new Chart(document.getElementById('setPickRate').getContext('2d'), {
            type: 'bar',
            data: {
                labels: Object.keys(setPickRate),
                datasets: [
                    {
                        label: '%',
                        data: Object.values(setPickRate),
                        borderColor: 'rgb(37, 41, 33)',
                        backgroundColor: 'rgb(37, 41, 33)',
                    },
                ]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        display: false,
                        position: 'bottom',
                    },
                    title: {
                        display: true,
                        text: '{{ 'menu.set_pr'|trans }}'
                    }
                }
            },
        });

        const housePickRateChart = new Chart(document.getElementById('housePickRate').getContext('2d'), {
            type: 'bar',
            data: {
                labels: Object.keys(housePickRate),
                datasets: [
                    {
                        label: '%',
                        data: Object.values(housePickRate),
                        borderColor: 'rgb(37, 41, 33)',
                        backgroundColor: 'rgb(37, 41, 33)',
                    },
                ]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        display: false,
                        position: 'bottom',
                    },
                    title: {
                        display: true,
                        text: '{{ 'menu.house_pr'|trans }}'
                    }
                }
            },
        });
        {% endif %}

        {% if userData is not null %}
        let userData = JSON.parse('{{ userData.deck_tops|json_encode|raw|e('js') }}');

        let chartData;

        {% for userScope,byUser in userData.deck_tops.by_stats %}
        {% for statScope,byStat in byUser %}

        const chart_{{ userScope }}_{{ statScope }} = barChart(
            'deck_stats_{{ userScope }}_{{ statScope }}',
            '{{ ('deck_comparison.'~statScope)|trans }}',
            userData.amounts.{{ userScope }}.{{ statScope }},
        );

        {% endfor %}
        {% endfor %}

        reloadStatComparison();

        function barChart(id, label, data) {
            return new Chart(document.getElementById(id).getContext('2d'), {
                type: 'bar',
                data: {
                    labels: Object.keys(data),
                    datasets: [
                        {
                            label: label,
                            data: Object.values(data),
                            borderColor: 'rgb(37, 41, 33)',
                            backgroundColor: 'rgb(37, 41, 33)',
                        },
                    ]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            display: false,
                            position: 'bottom',
                        },
                        title: {
                            display: true,
                            text: label
                        }
                    }
                },
            });
        }

        $('.deck_stat_comparison_select').on('change', function(e) {
            reloadStatComparison();
        });

        function reloadStatComparison() {
            const vs1 = $('#deckComparisonVs1')[0].value;
            const vs2 = $('#deckComparisonVs2')[0].value;
            const stat = $('#deckComparisonStat')[0].value;

            $('.deck_comparison_chart').hide();

            $('.deck_stats_' + vs1 + '_' + stat + '_container').show();
            $('.deck_stats_' + vs2 + '_' + stat + '_container').show();
        }
        {% endif %}
    </script>
{% endblock %}
