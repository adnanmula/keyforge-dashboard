<div class="shadow-lg p-3 mb-5 bg-white rounded" style="display: flex; overflow-x: auto">
    <table id="deckList" class="table table-responsive-sm table-hover" style="width:100%;">
        <thead>
        <tr>
            <th scope="col">{{ 'menu.tags'|trans }}</th>
            <th scope="col">{{ 'menu.deck'|trans }}</th>
            <th scope="col">{{ 'menu.set'|trans }}</th>
            <th scope="col">{{ 'menu.houses'|trans }}</th>
            <th scope="col">{{ 'menu.winrate'|trans }}</th>
            <th scope="col">{{ 'menu.sas'|trans }}</th>
            <th scope="col" data-toggle="tooltip" title="{{ 'deck.amber_control'|trans }}">A</th>
            <th scope="col" data-toggle="tooltip" title="{{ 'deck.expected_amber'|trans }}">E</th>
            <th scope="col" data-toggle="tooltip" title="{{ 'deck.artifact_control'|trans }}">R</th>
            <th scope="col" data-toggle="tooltip" title="{{ 'deck.creature_control'|trans }}">C</th>
            <th scope="col" data-toggle="tooltip" title="{{ 'deck.efficiency'|trans }}">F</th>
            <th scope="col" data-toggle="tooltip" title="{{ 'deck.recursion'|trans }}">U</th>
            <th scope="col" data-toggle="tooltip" title="{{ 'deck.disruption'|trans }}">D</th>
            <th scope="col"></th>
        </tr>
        </thead>
    </table>
</div>

<script>
    $(function () {
        $('[data-toggle="tooltip"]').tooltip({
            'container': 'body',
            'placement': 'top'
        })
    })

    function onlyFriends() {
        const input = document.getElementById('only_friends');

        if (null === input) {
            return false;
        }

        return $('#only_friends')[0].checked;
    }

    function tagFilterType() {
        return $('.tag_type_selector:checked')[0].value;
    }

    function tags() {
        return $('#tag-selector').val();
    }

    function tagsExcluded() {
        return $('#tag-selector-exclude').val();
    }

    function maxSas() {
        return $('#filter_max_sas')[0].value;
    }

    function minSas() {
        return $('#filter_min_sas')[0].value;
    }

    function houseFilterType() {
        return $('.house_type_selector:checked')[0].value;
    }

    function houses() {
        const checkboxes = $('.houses_selector:checked');
        let houses = [];

        checkboxes.each(function (index, check) {
            houses.push(check.value);
        });

        return houses;
    }

    function set() {
        const checkboxes = $('.set_selector:checked');
        let sets = [];

        checkboxes.each(function (index, check) {
            sets.push(check.value);
        });

        return sets;
    }

    function owners() {
        return $('#owner-selector').val();
    }

    function deckTypes() {
        return $('#deck-type-selector').val();
    }

    $(document).ready(function () {
        $("#applyFilters").click(function(event) {
            $('#deckList').DataTable().ajax.reload();
        });

        $(window).on('resize', function() {
            $('#deckList.dataTable').resize;
        });

        $("#clearFilters").click(function(event) {
            location.reload();
        });

        $('#deckList').DataTable({
            initComplete: function () {},
            searching: true,
            paging: true,
            info: true,
            responsive: true,
            processing: true,
            serverSide: true,
            order: [[4, 'desc']],
            lengthMenu: [10, 25, 50, 100],
            iDisplayLength: 25,
            ajax: {
                url: '{{ path('keyforge_decks_json') }}',
                data: function(d){
                    d.extraFilterOnlyOwned = false;
                    d.extraFilterOnlyFriends = onlyFriends();
                    d.extraFilterTagType = tagFilterType();
                    d.extraFilterTags = tags();
                    d.extraFilterTagsExcluded = tagsExcluded();
                    d.extraFilterHouses = houses();
                    d.extraFilterHouseFilterType = houseFilterType();
                    d.extraFilterSet = set();
                    d.extraFilterMaxSas = maxSas();
                    d.extraFilterMinSas = minSas();
                    d.extraFilterOwners = owners();
                    d.extraFilterDeckTypes = deckTypes();
                    {% if owner != null %}d.extraFilterOwner = '{{ owner }}';{% endif %}
                }
            },
            columns: [
                { data: "tags" },
                { data: "name" },
                { data: "set" },
                { data: "houses" },
                { data: "wins" },
                { data: "stats.sas" },
                { data: "stats.amberControl" },
                { data: "stats.expectedAmber" },
                { data: "stats.artifactControl" },
                { data: "stats.creatureControl" },
                { data: "stats.efficiency" },
                { data: "stats.recursion" },
                { data: "stats.disruption" },
                { data: "" },
            ],
            columnDefs: [
                {
                    render: function (data, type, row) {
                        const locale = '{{ app.locale }}';
                        let tagsJson = JSON.parse('{{ tags|json_encode|raw }}');

                        let tags = [];

                        data.forEach(function (tagId) {
                            tagsJson.forEach(function (item) {
                                if (tagId === item.id) {
                                    const tag = '<button type="button" class="btn btn-xs btn-outline-dark" data-type="'+item.type+'" data-value="' + item.name
                                        + '" style="background-color: ' + item.style.color_bg + '; color: ' + item.style.color_text + '; border-color: ' + item.style.color_outline + '">'
                                        + item.name[locale] + '</button>';

                                    tags.push(tag);
                                }
                            })
                        })

                        return tags.sort().join('');
                    },
                    targets: 0, //Tags
                },
                {
                    render: function (data, type, row) {
                        return '<a href="/deck/' + row.id + '">' + data + '</a>';
                    },
                    targets: 1, //Deck
                },
                {
                    render: function (data, type, row) {
                        let size = data === 'WC' ? 37 : 33;

                        let setNumber = '';
                        switch (data) {
                            case 'CotA':
                                setNumber = 1;
                                break;
                            case 'AoA':
                                setNumber = 2;
                                break;
                            case 'WC':
                                setNumber = 3;
                                break;
                            case 'MM':
                                setNumber = 4;
                                break;
                            case 'DT':
                                setNumber = 5;
                                break;
                            case 'WoE':
                                setNumber = 6;
                                break;
                            case 'GR':
                                setNumber = 7;
                                break;
                            case 'AS':
                                setNumber = 8;
                                break;
                        }

                        return '<img width="' + size + 'px" src="' + '/assets/keyforge/sets/' + data + '.svg' + '" alt="' + data + '"/><h6>' + setNumber + '</h6>';
                    },
                    targets: 2, //Set
                },
                {
                    render: function (data, type, row) {
                        let house0 = '/assets/keyforge/houses/' + data[0] + '.png';
                        let house1 = '/assets/keyforge/houses/' + data[1] + '.png';
                        let house2 = '/assets/keyforge/houses/' + data[2] + '.png';

                        return '<img width="35px" src="' + house0 + '" alt="' + data[0] +'"/>' +
                            '<img width="35px" src="' + house1 + '" alt="' + data[1] +'"/>' +
                            '<img width="35px" src="' + house2 + '" alt="' + data[2] +'"/>';
                    },
                    targets: 3, //Houses
                },
                {
                    render: function (data, type, row) {
                        let wins = 0;
                        let losses = 0;

                        {% if owner is null %}
                        wins = row.userData.wins_vs_users;
                        losses = row.userData.losses_vs_users;
                        {% else %}
                        wins = row.userData.wins;
                        losses = row.userData.losses;
                        {% endif %}

                        let win_rate = 0;

                        if (wins + losses > 0) {
                            win_rate = wins / (wins + losses) * 100;
                            win_rate = Math.round((win_rate + Number.EPSILON) * 100) / 100;
                        }

                        return wins + '/' + losses + ' (' + win_rate + '%)';
                    },
                    targets: 4, //Win Rate
                },
                {
                    render: function (data, type, row) {
                        return data;
                    },
                    targets: 5, //Sas
                },
                {
                    render: function (data, type, row) {
                        if ('STANDARD' === row.type) {
                            vaultLink = 'https://www.keyforgegame.com/deck-details/' + row.id;
                            dokLink = 'https://decksofkeyforge.com/decks/' + row.id;
                            wikiLink = 'https://archonarcana.com/Deck:' + row.id;

                            vaultLogo = '/assets/keyforge/logos/vault.png';
                            dokLogo = '/assets/keyforge/logos/dok.svg';
                            wikiLogo = '/assets/keyforge/logos/wiki.jpg';

                            return '<a href="' + vaultLink + '" target="_blank">' +
                                '<img class="img-thumbnail" width="50px" style="min-width: 50px" src="' + vaultLogo + '" alt="Vault"/></a>' +
                                '<a href="' + dokLink + '" target="_blank">' +
                                '<img class="img-thumbnail" width="40px" style="min-width: 40px" src="' + dokLogo + '" alt="DoK"/></a>' +
                                '<a href="' + wikiLink + '" target="_blank">' +
                                '<img class="img-thumbnail" width="50px" style="min-width: 40px" src="' + wikiLogo + '" alt="Wiki"/></a>';
                        }

                        if ('ALLIANCE' === row.type) {
                            dokLink = 'https://decksofkeyforge.com/alliance-decks/' + row.id;
                            dokLogo = '/assets/keyforge/logos/dok.svg';

                            return '<a href="' + dokLink + '" target="_blank">' +
                                '<img class="img-thumbnail" width="40px" style="min-width: 40px" src="' + dokLogo + '" alt="DoK"/></a>';
                        }

                        if ('THEORETICAL' === row.type) {
                            dokLink = 'https://decksofkeyforge.com/theoretical-decks/' + row.id;
                            dokLogo = '/assets/keyforge/logos/dok.svg';

                            return '<a href="' + dokLink + '" target="_blank">' +
                                '<img class="img-thumbnail" width="40px" style="min-width: 40px" src="' + dokLogo + '" alt="DoK"/></a>';
                        }

                        return '';
                    },
                    targets: 13, //Buttons
                },
                {
                    targets: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 ],
                    searchable: false,
                    visible: true,
                },
                {
                    targets: [0, 2, 3, 13],
                    orderable: false
                },
                {
                    targets: [1, 4, 5, 6, 7, 8, 9, 10, 11, 12],
                    orderable: true
                },
                { width: 250, targets: 0 },
                { width: 350, targets: 1 },
                { width: 50, targets: 2 },
                { width: 200, targets: 3 },
                { width: 150, targets: 13 },
            ],
        });
    });
</script>
