{% extends "Keyforge/Shared/keyforge_base.html.twig" %}

{% block title %}Partidas{% endblock %}

{% block body %}
    <div class="shadow-lg p-3 mb-5 bg-white rounded">
        <div class="divider py-2"></div>

        <div class="row">
            <div class="col-10 d-flex justify-content-start">
                <h3>Partidas de {{ name }}</h3>
            </div>

            {% if user_is_external == false %}
                <div class="col-2 d-flex justify-content-end">
                    <a class="btn btn-dark" data-bs-toggle="collapse" href="#userStats" role="button" aria-expanded="false" aria-controls="collapseExample">Mostrar/Ocultar estadísticas</a>
                </div>
            {% endif %}
        </div>

        <div class="divider py-2"></div>

        {% if user_is_external == false %}
            <div class="collapse" id="userStats">
            <div class="row mt-3">
                <div class="col-12 col-sm-12 col-md-4 col-lg-4">
                    <canvas id="winRateVsUsers" width="200" height="210"></canvas>
                </div>
                <div class="col-12 col-sm-12 col-md-4 col-lg-4">
                    <canvas id="setWins" width="200" height="200"></canvas>
                </div>
                <div class="col-12 col-sm-12 col-md-4 col-lg-4">
                    <canvas id="houseWins" width="200" height="200"></canvas>
                </div>
            </div>

            <div class="divider py-2"></div>
            <div class="divider py-2"></div>

            <div class="row">
                <div class="col">
                    <canvas id="winsByDate" height="100"></canvas>
                </div>
            </div>

            <div class="divider py-2"></div>
            <div class="divider py-2"></div>

            <div class="row">
                <div class="col">
                    <canvas id="winsByDeck" height="300"></canvas>
                </div>
            </div>
        </div>
        {% endif %}

        <div class="divider py-2"></div>
        <div class="divider py-2"></div>

        <div class="row m-2">
            {% if (null != best_deck) %}
                <a href="/deck/{{ best_deck.id }}?userId={{ userId }}" class="btn btn-dark col-3 border col-12 col-sm-6 col-lg-3">
                    <h5>Best performance</h5>
                    <p>{{ best_deck.name }}</p>
                    <p>{{ best_deck.wins }}/{{ best_deck.losses }} (WR: {{ best_deck.win_rate }}%/PR: {{ best_deck.pick_rate }}%)</p>
                </a>
            {% endif %}

            {% if (null != worse_deck) %}
                <a href="/deck/{{ worse_deck.id }}?userId={{ userId }}" class="btn btn-dark border col-12 col-sm-6 col-lg-3">
                    <h5>Worse performance</h5>
                    <p>{{ worse_deck.name }}</p>
                    <p>{{ worse_deck.wins }}/{{ worse_deck.losses }} (WR: {{ worse_deck.win_rate }}%/PR: {{ worse_deck.pick_rate }}%)</p>
                </a>
            {% endif %}

            {% if (null != favorite_deck) %}
                <a href="/deck/{{ favorite_deck.id }}?userId={{ userId }}" class="btn btn-dark border col-12 col-sm-6 col-lg-3">
                    <h5>Favorite</h5>
                    <p>{{ favorite_deck.name }}</p>
                    <p>Played {{ favorite_deck.wins + favorite_deck.losses }} times</p>
                </a>
            {% endif %}

            {% if (null != win_streak) %}
                <a class="btn btn-dark border col-12 col-sm-6 col-lg-3">
                    <h5>Longest win streak</h5>
                    <p></p>
                    <p>{{ win_streak }}</p>
                </a>
            {% endif %}

            {% if (null != competition_wins and competition_wins | length) %}
                <div class="btn btn-dark border">
                    <h5>Palmarés</h5>

                    <div class="row">
                        {% for win in competition_wins %}
                            <div class="col-12 col-sm-4 col-md-3 col-xl-2">
                                <a class="text-decoration-none" href="/competitions/{{ win.reference }}" style="color: white">
                                    <div class="row">
                                        <i class="bi bi-trophy" style="font-size: 3em;"></i>
                                    </div>
                                    <div class="row">
                                        <span>{{ win.name }}</span>
                                    </div>
                                    <div class="row">
                                        <span>{{ win.date }}</span>
                                    </div>
                                </a>
                            </div>
                        {% endfor %}
                    </div>
                </div>
            {% endif %}
        </div>

        <div class="divider py-2"></div>
        <div class="divider py-2"></div>

        {% if userId != null %}
            {% set endpoint = '/games/json?deckId=' ~ reference ~ '&userId=' ~ userId %}
        {% else %}
            {% set endpoint = '/games/json?deckId=' ~ reference %}
        {% endif %}

        {% include 'Keyforge/Stats/Game/game_list.html.twig' with {
            'endpoint': '/games/json?userId=' ~ reference,
            'reference': reference,
            'reference_type': 'winner',
        } %}
    </div>

    <script>
        {% if user_is_external == false %}

        let winRateVsUsers = JSON.parse('{{ win_rate_vs_users|json_encode|raw }}');
        let pickRateVsUsers = JSON.parse('{{ pick_rate_vs_users|json_encode|raw }}');
        let winsByDate = JSON.parse('{{ wins_by_date|json_encode|raw }}');
        let lossesByDate = JSON.parse('{{ losses_by_date|json_encode|raw }}');
        let winsByUsers = JSON.parse('{{ wins_vs_users|json_encode|raw }}');
        let decksStats = JSON.parse('{{ decks_stats|json_encode|raw }}');
        let winsBySet = JSON.parse('{{ wins_by_set|json_encode|raw }}');
        let winsByHouse = JSON.parse('{{ wins_by_house|json_encode|raw }}');

        let winsByUser = [];
        let lossesByUser = [];

        $.each(winsByUsers, function(index, value) {
            winsByUser[index] = value['wins'];
            lossesByUser[index] = value['losses'];
        });

        let winsByDeck = [];
        let lossesByDeck = [];
        let winRateByDeck = [];
        let pickRateByDeck = [];

        $.each(decksStats, function(index, value) {
            winsByDeck[index] = value['wins'];
            lossesByDeck[index] = value['losses'];
            winRateByDeck[index] = value['win_rate'];
            pickRateByDeck[index] = value['pick_rate'];
        });

        const winRateVsUsersChart = new Chart(document.getElementById('winRateVsUsers').getContext('2d'), {
            type: 'bar',
            data: {
                labels: Object.keys(winRateVsUsers),
                datasets: [
                    {
                        label: 'WinRate%',
                        data: Object.values(winRateVsUsers),
                        borderColor: 'rgb(37, 41, 33)',
                        backgroundColor: 'rgb(37, 41, 33)',
                        maxBarThickness: 50,
                        yAxisID: 'percentage',
                    },
                    {
                        label: 'PickRate%',
                        data: Object.values(pickRateVsUsers),
                        borderColor: 'rgb(115, 115, 115)',
                        backgroundColor: 'rgb(115, 115, 115)',
                        maxBarThickness: 50,
                        yAxisID: 'percentage',
                    },
                    {
                        label: 'Wins',
                        data: Object.values(winsByUser),
                        borderColor: 'rgb(70,113,26)',
                        backgroundColor: 'rgb(70,113,26)',
                        maxBarThickness: 50,
                        yAxisID: 'wins',
                    },
                    {
                        label: 'Losses',
                        data: Object.values(lossesByUser),
                        borderColor: 'rgb(148,22,68)',
                        backgroundColor: 'rgb(148,22,68)',
                        maxBarThickness: 50,
                        yAxisID: 'wins',
                    },
                ]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        display: false,
                        position: 'bottom',
                    },
                    title: {
                        display: true,
                        text: 'Win/Pick Rate'
                    }
                },
                scale: {
                    ticks: {
                        precision: 0,
                    },
                },
                scales: {
                    percentage: {
                        type: 'linear',
                        display: true,
                        position: 'left',
                        min: 0,
                        max: 100,
                        grid: {
                            drawOnChartArea: false,
                        },
                        stacked: false,
                    },
                    wins: {
                        type: 'linear',
                        display: true,
                        position: 'right',
                        grid: {
                            drawOnChartArea: true,
                        },
                        stacked: false,
                    },
                },
            },
        });

        const setWinsChart = new Chart(document.getElementById('setWins').getContext('2d'), {
            type: 'doughnut',
            data: {
                datasets: [
                    {
                        data: Object.values(winsBySet),
                        backgroundColor: [
                            'rgb(255, 99, 132)',
                            'rgb(54, 162, 235)',
                            'rgb(210, 145, 188)',
                            'rgb(179, 217, 178)',
                            'rgb(114, 99, 143)',
                        ],
                    },
                ],
                labels: Object.keys(winsBySet),
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        display: false,
                        position: 'bottom',
                    },
                    title: {
                        display: true,
                        text: 'Set wins'
                    }
                }
            },
        });

        const houseWinsChart = new Chart(document.getElementById('houseWins').getContext('2d'), {
            type: 'doughnut',
            data: {
                datasets: [
                    {
                        data: Object.values(winsByHouse),
                        backgroundColor: [
                            'rgb(41, 128, 185)', //Sanctum
                            'rgb(225, 78, 183)', //Dis
                            'rgb(46, 204, 113)', //Mars
                            'rgb(125, 60, 152)', //Star Alliance
                            'rgb(22, 160, 133)', //Saurian
                            'rgb(81, 90, 90)',   //Shadows
                            'rgb(20, 90, 50)',   //Untamed
                            'rgb(231, 76, 60)',  //Brobnar
                            'rgb(21, 67, 96)',   //Unfathomable
                            'rgb(52, 152, 219)', //Logos
                        ],
                    }
                ],
                labels: Object.keys(winsByHouse),
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        display: false,
                        position: 'bottom',
                    },
                    title: {
                        display: true,
                        text: 'House wins'
                    }
                }
            },
        });

        const winsByDecksChart = new Chart(document.getElementById('winsByDeck').getContext('2d'), {
            type: 'bar',
            data: {
                labels: Object.keys(winsByDeck),
                datasets: [
                    {
                        label: 'Win Rate',
                        data: Object.values(winRateByDeck),
                        borderColor: 'rgb(37, 41, 33)',
                        backgroundColor: 'rgb(37, 41, 33)',
                        xAxisID: 'percentage',
                    },
                    {
                        label: 'Pick Rate',
                        data: Object.values(pickRateByDeck),
                        borderColor: 'rgb(115, 115, 115)',
                        backgroundColor: 'rgb(115, 115, 115)',
                        xAxisID: 'percentage',
                    },
                    {
                        label: 'Wins',
                        data: Object.values(winsByDeck),
                        borderColor: 'rgb(70,113,26)',
                        backgroundColor: 'rgb(70,113,26)',
                        xAxisID: 'wins',
                    },
                    {
                        label: 'Losses',
                        data: Object.values(lossesByDeck),
                        borderColor: 'rgb(148,22,68)',
                        backgroundColor: 'rgb(148,22,68)',
                        xAxisID: 'wins',
                    },
                ]
            },
            options: {
                indexAxis: 'y',
                responsive: true,
                plugins: {
                    legend: {
                        display: true,
                        position: 'top',
                    },
                    title: {
                        display: false,
                        text: 'Wins/Losses by deck'
                    }
                },
                scale: {
                    ticks: {
                        precision: 0,
                    },
                },
                scales: {
                    wins: {
                        type: 'linear',
                        display: true,
                        position: 'bottom',
                        grid: {
                            drawOnChartArea: true,
                        },
                        stacked: false,
                    },
                    percentage: {
                        type: 'linear',
                        display: true,
                        position: 'top',
                        min: 0,
                        max: 100,
                        grid: {
                            drawOnChartArea: false,
                        },
                        stacked: false,
                    },
                },
            },
        });

        const winsByDateChart = new Chart(document.getElementById('winsByDate').getContext('2d'), {
            type: 'bar',
            data: {
                labels: Object.keys(winsByDate),
                datasets: [
                    {
                        label: 'Wins',
                        data: Object.values(winsByDate),
                        borderColor: 'rgb(70,113,26)',
                        backgroundColor: 'rgb(70,113,26)',
                    },
                    {
                        label: 'Losses',
                        data: Object.values(lossesByDate),
                        borderColor: 'rgb(148,22,68)',
                        backgroundColor: 'rgb(148,22,68)',
                    },
                ]
            },
            options: {
                responsive: true,
                aspectRatio: 2,
                plugins: {
                    legend: {
                        display: false,
                        position: 'bottom',
                    },
                    title: {
                        display: true,
                        text: 'Wins/Losses along time',
                    }
                },
                scale: {
                    ticks: {
                        precision: 0,
                    },
                },
            },
        });

        {% endif %}
    </script>
{% endblock %}
