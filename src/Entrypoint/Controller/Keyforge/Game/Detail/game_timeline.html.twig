{% block header %}
    <style>
        .timeline {
            position: relative;
            max-width: 800px;
            margin: auto;
            padding: 20px 0;
        }

        .timeline::after {
            content: '';
            position: absolute;
            width: 4px;
            background-color: #999;
            top: 0;
            bottom: 0;
            left: 50%;
            margin-left: -2px;
        }

        .timeline-item {
            padding: 20px 30px;
            position: relative;
            background-color: inherit;
            width: 50%;
        }

        .timeline-item::after {
            content: ' ';
            position: absolute;
            width: 20px;
            height: 20px;
            right: -10px;
            background-color: white;
            border: 4px solid #ff9f55;
            top: 20px;
            border-radius: 50%;
            z-index: 1;
        }

        .timeline-item.left {
            left: 0;
        }

        .timeline-item.right {
            left: 50%;
        }

        .timeline-item.right::after {
            left: -10px;
        }

        .timeline-content {
            padding: 20px;
            background-color: white;
            position: relative;
            border-radius: 6px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        }

        .timeline-content h3 {
            margin-top: 0;
        }

        .timeline-content ul {
            padding-left: 20px;
            margin: 10px 0 0 0;
        }

        .timeline-user {
            display: none;
        }

        @media screen and (max-width: 600px) {
            .timeline::after {
                left: 31px;
            }

            .timeline-item {
                width: 100%;
                padding-left: 70px;
                padding-right: 25px;
            }

            .timeline-item.right {
                left: 0;
            }

            .timeline-item.right::after,
            .timeline-item.left::after {
                left: 15px;
            }

            .timeline-user {
                display: block;
            }
        }
    </style>
{% endblock %}

<div class="row">
    <div class="col-6"><h5 style="text-align:right;" id="fullTimelinePlayer1">{{ log.player1.name }}</h5></div>
    <div class="col-6"><h5 style="text-align:left;" id="fullTimelinePlayer2">{{ log.player2.name }}</h5></div>
    <div class="timeline" id="timeline"></div>
</div>

<script>
    const cardsPlayedData = JSON.parse('{{ log.timeline.filter(eventTypes.CARDS_PLAYED).items|json_encode|raw }}');
    const fullTimelineEvents = JSON.parse('{{ log.timeline|json_encode|raw }}');

    const fullTimelineEventsGrouped = [];

    fullTimelineEvents.forEach(entry => {
        const key = `${entry.player}|${entry.turn.value}`;
        if (!fullTimelineEventsGrouped[key]) {
            fullTimelineEventsGrouped[key] = [];
        }

        fullTimelineEventsGrouped[key].push(entry);
    });

    const timeline = document.getElementById('timeline');

    Object.keys(fullTimelineEventsGrouped).forEach(key => {
        const turnEntry = fullTimelineEventsGrouped[key];

        let actions = [];
        Object.keys(turnEntry).forEach(key2 => {
            const event = turnEntry[key2];
            switch (event.type) {
                case 'CARDS_PLAYED':
                    event.value.forEach(card => {
                        actions.push('{{ 'menu.played'|trans }} ' + card);
                    });
                    break;

                case 'KEY_FORGED':
                    actions.push('{{ 'menu.key_forged'|trans }}: ' + event.value + ' {{ 'menu.cost'|trans }}: ' + event.payload.amberCost + ' {{ 'menu.remaining'|trans }}: ' + event.payload.amberRemaining);
                    break;

                case 'CARDS_DISCARDED':
                    actions.push('{{ 'menu.cards_discarded'|trans }}: ' + event.value);
                    break;

                case 'CARDS_DRAWN':
                    actions.push('{{ 'menu.cards_drawn'|trans }}: ' + event.value);
                    break;

                case 'AMBER_OBTAINED':
                    actions.push('{{ 'menu.current_amber'|trans }}: ' + event.value + ' (delta: ' + event.payload.delta + ')');
                    break;

                case 'HOUSE_CHOSEN':
                    actions.push('{{ 'menu.house_chosen'|trans }}: ' + event.value);
                    break;

                case 'AMBER_STOLEN':
                    actions.push('{{ 'game.timeline.used'|trans }} ' + event.payload.trigger + ' {{ 'game.timeline.to_steal'|trans|lower }} ' + event.value + ' {{ 'game.timeline.amber'|trans|lower }}');
                    break;

                case 'FIGHT':
                    if (event.payload.trigger === event.value) {
                        actions.push('{{ 'game.timeline.fought_with'|trans }} ' + event.value + ' {{ 'game.timeline.versus'|trans|lower }} ' + event.payload.target);
                    } else {
                        actions.push('{{ 'game.timeline.used'|trans }} ' + event.payload.trigger + ' {{ 'game.timeline.to_fight_with'|trans|lower }} ' + event.value + ' {{ 'game.timeline.versus'|trans|lower }} ' + event.payload.target);
                    }
                    break;

                case 'REAP':
                    if (event.payload.trigger === event.value) {
                        actions.push('{{ 'game.timeline.reaped_with'|trans }} ' + event.value);
                    } else {
                        actions.push('{{ 'game.timeline.used'|trans }} ' + event.payload.trigger + ' {{ 'game.timeline.to_reap_with'|trans|lower }} ' + event.value);
                    }
                    break;

                case 'EXTRA_TURN':
                    actions.push('{{ 'game.timeline.used'|trans }} ' + event.payload.trigger + ' {{ 'game.timeline.extra_turn'|trans|lower }}');
                    break;

                case 'TIDE_RAISED':
                    if ('manual' === event.value) {
                        actions.push('{{ 'game.timeline.manually_raised_tide'|trans }}');
                    } else {
                        actions.push('{{ 'game.timeline.used'|trans }} ' + event.value + ' {{ 'game.timeline.to_raise_tide'|trans|lower }}');
                    }
                    break;

                case 'TOKEN_CREATED':
                    actions.push('{{ 'game.timeline.used'|trans }} ' + event.value + ' {{ 'game.timeline.to_make_token'|trans|lower }}');
                    break;

                case 'PROPHECY_ACTIVATED':
                    actions.push('{{ 'game.timeline.activates'|trans }} {{ 'game.timeline.the_prophecy'|trans|lower }} ' + event.value);
                    break;

                case 'PROPHECY_FULFILLED':
                    actions.push('{{ 'game.timeline.fulfilled'|trans }} {{ 'game.timeline.the_prophecy'|trans|lower }} ' + event.value);
                    break;

                case 'FATE_RESOLVED':
                    actions.push('{{ 'game.timeline.resolved'|trans }} {{ 'game.timeline.the_fate_of'|trans|lower }} ' + event.value);
                    break;

                case 'CHAINS_REDUCED':
                    actions.push('{{ 'game.timeline.reduced_chains'|trans({'%by%': '-replace1-', '%to%': '-replace2-'}) }}'.replace('-replace1-', event.value).replace('-replace2-', event.payload.currentChains));
                    break;
            }
        })

        const player = key.split('|')[0];
        const turn = key.split('|')[1];
        const side = player === '{{ log.player1.name }}' ? 'left' : 'right';
        const turnLabel = '{{ 'menu.turn'|trans }} ' + turn;

        const item = document.createElement('div');
        item.className = `timeline-item ${side}`;
        const content = document.createElement('div');
        content.className = 'timeline-content';

        content.innerHTML = `
          <h5 class="timeline-user">${player}</h5>
          <h5>${turnLabel}</h5>
          <span>${actions.join("<hr style='margin: 0.2rem'>")}</span>
        `;

        item.appendChild(content);
        timeline.appendChild(item);
    });
</script>
