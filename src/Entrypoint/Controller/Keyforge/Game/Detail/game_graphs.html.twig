<div class="row">
    <div class="col-12 col-md-6">
        <h5>{{ 'menu.graph_amber_generation_by_turn'|trans }}</h5>
        <canvas id="amberByTurnChart"></canvas>
    </div>

    <div class="col-12 col-md-6 mt-3">
        <h5>{{ 'menu.graph_amber_generation_accumulated'|trans }}</h5>
        <canvas id="amberAccumulatedChart"></canvas>
    </div>


    <div class="col-12 col-md-3 mt-3">
        <h5>{{ 'menu.houses_chosen'|trans }} {{ game.log.winner.name }} </h5>
        <canvas id="winnerHousesByTurnChart"></canvas>
    </div>

    <div class="col-12 col-md-3 mt-3">
        <h5>{{ 'menu.houses_chosen'|trans }} {{ game.log.loser.name }}</h5>
        <canvas id="loserHousesByTurnChart"></canvas>
    </div>

    <div class="col-12 col-md-6 mt-3">
        <h5>{{ 'menu.amber_stolen_by_turn'|trans }}</h5>
        <canvas id="amberStolenByTurnChart"></canvas>
    </div>

    <div class="col-12 col-md-6 mt-3">
        <h5>{{ 'menu.fights_by_turn'|trans }}</h5>
        <canvas id="fightsByTurnChart"></canvas>
    </div>

    <div class="col-12 col-md-6 mt-3">
        <h5>{{ 'menu.reaps_by_turn'|trans }}</h5>
        <canvas id="reapsByTurnChart"></canvas>
    </div>
</div>

<script>
    const playerData = {
        winner: {
            raw: JSON.parse('{{ game.log.winner.amberObtained|json_encode|raw }}'),
            amberStolen: JSON.parse('{{ game.log.winner.amberStolen.amountToArrayByTurn(game.log.length)|json_encode|raw }}'),
            fights: JSON.parse('{{ game.log.winner.fights.amountToArrayByTurn(game.log.length)|json_encode|raw }}'),
            reaps: JSON.parse('{{ game.log.winner.reaps.amountToArrayByTurn(game.log.length)|json_encode|raw }}'),
            byTurn: [],
            accumulative: [],
            color: 'rgba(25, 135, 84, 0.7)',
        },
        loser: {
            raw: JSON.parse('{{ game.log.loser.amberObtained|json_encode|raw }}'),
            amberStolen: JSON.parse('{{ game.log.loser.amberStolen.amountToArrayByTurn(game.log.length)|json_encode|raw }}'),
            fights: JSON.parse('{{ game.log.loser.fights.amountToArrayByTurn(game.log.length)|json_encode|raw }}'),
            reaps: JSON.parse('{{ game.log.loser.reaps.amountToArrayByTurn(game.log.length)|json_encode|raw }}'),
            byTurn: [],
            accumulative: [],
            color: 'rgba(220, 53, 69, 0.7)',
        },
        total: {
            accumulative: [],
            color: 'rgba(0, 0, 0, 0.7)',
        }
    }

    playerData.winner.raw.forEach(entry => {
        const accumulative = playerData.winner.accumulative;
        const last = accumulative.length ? accumulative[accumulative.length - 1] : 0;

        playerData.winner.byTurn.push(entry.delta);
        playerData.winner.accumulative.push(last + entry.delta);
    });

    playerData.loser.raw.forEach(entry => {
        const accumulative = playerData.loser.accumulative;
        const last = accumulative.length ? accumulative[accumulative.length - 1] : 0;

        playerData.loser.byTurn.push(entry.delta);
        playerData.loser.accumulative.push(last + entry.delta);
    });

    playerData.total.accumulative = playerData.winner.accumulative.map((value, index) => value + playerData.loser.accumulative[index]);

    const labels = Array.from(new Set([
        ...playerData.winner.raw.map(e => e.turn.value + ' ' + e.turn.moment),
        ...playerData.loser.raw.map(e => e.turn.value + ' ' + e.turn.moment),
    ]));

    new Chart(document.getElementById('amberByTurnChart').getContext('2d'), {
        type: 'bar',
        data: {
            labels: labels,
            datasets: [
                {
                    label: '{{ game.log.winner.name }}',
                    data: playerData.winner.byTurn,
                    backgroundColor: playerData.winner.color,
                },
                {
                    label: '{{ game.log.loser.name }}',
                    data: playerData.loser.byTurn,
                    backgroundColor: playerData.loser.color,
                },
            ]
        },
    });

    new Chart(document.getElementById('amberAccumulatedChart').getContext('2d'), {
        type: 'line',
        data: {
            labels: labels,
            datasets: [
                {
                    label: '{{ game.log.winner.name }}',
                    data: playerData.winner.accumulative,
                    borderColor: playerData.winner.color.replace('0.7', '1'),
                    backgroundColor: playerData.winner.color,
                    fill: false
                },
                {
                    label: '{{ game.log.loser.name }}',
                    data: playerData.loser.accumulative,
                    borderColor: playerData.loser.color.replace('0.7', '1'),
                    backgroundColor: playerData.loser.color,
                    fill: false
                },
                {
                    label: '{{ 'menu.total'|trans }}',
                    data: playerData.total.accumulative,
                    borderColor: playerData.total.color,
                    fill: false
                }
            ]
        },
        options: {
            responsive: true,
        }
    });

    new Chart(document.getElementById('amberStolenByTurnChart').getContext('2d'), {
        type: 'bar',
        data: {
            labels: Object.keys(playerData.winner.amberStolen),
            datasets: [
                {
                    label: '{{ game.log.winner.name }}',
                    data: playerData.winner.amberStolen,
                    backgroundColor: playerData.winner.color,
                },
                {
                    label: '{{ game.log.loser.name }}',
                    data: playerData.loser.amberStolen,
                    backgroundColor: playerData.loser.color,
                },
            ]
        },
    });

    new Chart(document.getElementById('fightsByTurnChart').getContext('2d'), {
        type: 'bar',
        data: {
            labels: Object.keys(playerData.winner.fights),
            datasets: [
                {
                    label: '{{ game.log.winner.name }}',
                    data: playerData.winner.fights,
                    backgroundColor: playerData.winner.color,
                },
                {
                    label: '{{ game.log.loser.name }}',
                    data: playerData.loser.fights,
                    backgroundColor: playerData.loser.color,
                },
            ]
        },
    });

    new Chart(document.getElementById('reapsByTurnChart').getContext('2d'), {
        type: 'bar',
        data: {
            labels: Object.keys(playerData.winner.reaps),
            datasets: [
                {
                    label: '{{ game.log.winner.name }}',
                    data: playerData.winner.reaps,
                    backgroundColor: playerData.winner.color,
                },
                {
                    label: '{{ game.log.loser.name }}',
                    data: playerData.loser.reaps,
                    backgroundColor: playerData.loser.color,
                },
            ]
        },
    });

    const houseColors = {
        brobnar: 'rgb(231, 76, 60)',
        dis: 'rgb(225, 78, 183)',
        ekwidon: 'rgb(177, 29, 33)',
        geistoid: 'rgb(37, 41, 33)',
        logos: 'rgb(52, 152, 219)',
        mars: 'rgb(46, 204, 113)',
        redemption: 'rgb(218,8,8)',
        sanctum: 'rgb(41, 128, 185)',
        saurian: 'rgb(22, 160, 133)',
        shadows: 'rgb(81, 90, 90)',
        skyborn: 'rgb(9,237,211)',
        star_alliance: 'rgb(125, 60, 152)',
        unfathomable: 'rgb(21, 67, 96)',
        untamed: 'rgb(20, 90, 50)',
    };

    const houseChosenEvent = {
        winner: {
            events: JSON.parse('{{ game.log.winner.housesChosen|json_encode|raw }}'),
            aggregated: [],
            labels: [],
            bgColors: [],
        },
        loser: {
            events: JSON.parse('{{ game.log.loser.housesChosen|json_encode|raw }}'),
            aggregated: [],
            labels: [],
            bgColors: [],
        },
    };

    houseChosenEvent.winner.events.forEach(event => {
        const house = event.value;
        houseChosenEvent.winner.aggregated[house] = (houseChosenEvent.winner.aggregated[house] || 0) + 1;
    });

    houseChosenEvent.loser.events.forEach(event => {
        const house = event.value;
        houseChosenEvent.loser.aggregated[house] = (houseChosenEvent.loser.aggregated[house] || 0) + 1;
    });

    houseChosenEvent.winner.labels = Object.keys(houseChosenEvent.winner.aggregated);
    houseChosenEvent.loser.labels = Object.keys(houseChosenEvent.loser.aggregated);
    houseChosenEvent.winner.bgColors = houseChosenEvent.winner.labels.map(house => houseColors[house]);
    houseChosenEvent.loser.bgColors = houseChosenEvent.loser.labels.map(house => houseColors[house]);

    new Chart(document.getElementById('winnerHousesByTurnChart').getContext('2d'), {
        type: 'doughnut',
        data: {
            labels: houseChosenEvent.winner.labels,
            datasets: [{
                data: Object.values(houseChosenEvent.winner.aggregated),
                backgroundColor: houseChosenEvent.winner.bgColors,
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            plugins: {
                legend: {
                    position: 'bottom',
                },
            },
            cutout: '60%'
        }
    });

    new Chart(document.getElementById('loserHousesByTurnChart').getContext('2d'), {
        type: 'doughnut',
        data: {
            labels: houseChosenEvent.loser.labels,
            datasets: [{
                data: Object.values(houseChosenEvent.loser.aggregated),
                backgroundColor: houseChosenEvent.loser.bgColors,
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            plugins: {
                legend: {
                    position: 'bottom',
                },
            },
            cutout: '60%'
        }
    });
</script>
