<div class="row">
    <div class="col-12 col-md-6">
        <h5>{{ 'menu.graph_amber_generation_by_turn'|trans }}</h5>
        <canvas id="amberByTurnChart"></canvas>
    </div>

    <div class="col-12 col-md-6">
        <h5>{{ 'menu.graph_amber_generation_accumulated'|trans }}</h5>
        <canvas id="amberAccumulatedChart"></canvas>
    </div>
</div>

<script>
    const amberPlayerData = {
        winner: {
            raw: JSON.parse('{{ game.log.winner.amberObtained|json_encode|raw }}'),
            byTurn: [],
            accumulative: [],
            color: 'rgba(25, 135, 84, 0.7)',
        },
        loser: {
            raw: JSON.parse('{{ game.log.loser.amberObtained|json_encode|raw }}'),
            byTurn: [],
            accumulative: [],
            color: 'rgba(220, 53, 69, 0.7)',
        },
        total: {
            accumulative: [],
            color: 'rgba(0, 0, 0, 0.7)',
        }
    }

    amberPlayerData.winner.raw.forEach(entry => {
        const accumulative = amberPlayerData.winner.accumulative;
        const last = accumulative.length ? accumulative[accumulative.length - 1] : 0;

        amberPlayerData.winner.byTurn.push(entry.delta);
        amberPlayerData.winner.accumulative.push(last + entry.delta);
    });

    amberPlayerData.loser.raw.forEach(entry => {
        const accumulative = amberPlayerData.loser.accumulative;
        const last = accumulative.length ? accumulative[accumulative.length - 1] : 0;

        amberPlayerData.loser.byTurn.push(entry.delta);
        amberPlayerData.loser.accumulative.push(last + entry.delta);
    });

    amberPlayerData.total.accumulative = amberPlayerData.winner.accumulative.map((value, index) => value + amberPlayerData.loser.accumulative[index]);

    const labels = Array.from(new Set([
        ...amberPlayerData.winner.raw.map(e => e.turn.value + ' ' + e.turn.moment),
        ...amberPlayerData.loser.raw.map(e => e.turn.value + ' ' + e.turn.moment),
    ]));

    new Chart(document.getElementById('amberByTurnChart').getContext('2d'), {
        type: 'bar',
        data: {
            labels: labels,
            datasets: [
                {
                    label: '{{ game.log.winner.name }}',
                    data: amberPlayerData.winner.byTurn,
                    backgroundColor: amberPlayerData.winner.color,
                },
                {
                    label: '{{ game.log.loser.name }}',
                    data: amberPlayerData.loser.byTurn,
                    backgroundColor: amberPlayerData.loser.color,
                },
            ]
        },
    });

    new Chart(document.getElementById('amberAccumulatedChart').getContext('2d'), {
        type: 'line',
        data: {
            labels: labels,
            datasets: [
                {
                    label: '{{ game.log.winner.name }}',
                    data: amberPlayerData.winner.accumulative,
                    borderColor: amberPlayerData.winner.color.replace('0.7', '1'),
                    backgroundColor: amberPlayerData.winner.color,
                    fill: false
                },
                {
                    label: '{{ game.log.loser.name }}',
                    data: amberPlayerData.loser.accumulative,
                    borderColor: amberPlayerData.loser.color.replace('0.7', '1'),
                    backgroundColor: amberPlayerData.loser.color,
                    fill: false
                },
                {
                    label: '{{ 'menu.total'|trans }}',
                    data: amberPlayerData.total.accumulative,
                    borderColor: amberPlayerData.total.color,
                    fill: false
                }
            ]
        },
        options: {
            responsive: true,
        }
    });
</script>
