<div class="shadow-lg p-3 mb-3 bg-white rounded">
    <div class="row" id="stats_by_scopes_container">
        <div class="col-12 col-md-6">
            <canvas id="deck_card_types" class="m-0 mt-1"></canvas>

            <div class="divider py-2"></div>
            <div class="divider py-2"></div>
            <div class="divider py-2"></div>

            <select id="deck_compare_stats" class="form-select">
                <option value="sas">{{ 'deck.sas'|trans }}</option>
                <option value="expected_amber">{{ 'deck.expected_amber'|trans }}</option>
                <option value="amber_control">{{ 'deck.amber_control'|trans }}</option>
                <option value="creature_control">{{ 'deck.creature_control'|trans }}</option>
                <option value="artifact_control">{{ 'deck.artifact_control'|trans }}</option>
            </select>

            <div class="divider py-2"></div>
            <div class="divider py-2"></div>

            <canvas id="deck_stats_comparison_sas" class="deck_stats_comparison"></canvas>
            <canvas id="deck_stats_comparison_expected_amber" style="display: none" class="deck_stats_comparison"></canvas>
            <canvas id="deck_stats_comparison_amber_control" style="display: none" class="deck_stats_comparison"></canvas>
            <canvas id="deck_stats_comparison_creature_control" style="display: none" class="deck_stats_comparison"></canvas>
            <canvas id="deck_stats_comparison_artifact_control" style="display: none" class="deck_stats_comparison"></canvas>
        </div>

        <div class="col-12 col-md-6">
            <h4>{{ deck.name }}</h4>
            <span>{{ 'menu.compare_to'|trans }}</span>
            <select id="deck_compare_to" class="form-select"></select>
            <div class="divider py-2"></div>

            <table class="table table-hover">
                <tr>
                    <td>{{ 'deck.set'|trans }}</td>
                    <td class="text-end">{{ deck.set }}</td>
                    <td id="diff_set" style="width: 1px;" class="comparison_stat text-nowrap text-end"></td>
                    <td id="other_deck_set" style="width: 1px;">
                </tr>
                <tr>
                    <td>{{ 'deck_comparison.sas'|trans }}</td>
                    <td class="text-end">{{ deck.stats.sas }}</td>
                    <td id="diff_sas" style="width: 1px;" class="comparison_stat text-nowrap text-end"></td>
                    <td id="other_deck_sas" style="width: 1px;">
                </tr>
                <tr>
                    <td>{{ 'deck_comparison.expectedAmber'|trans }}</td>
                    <td class="text-end">{{ deck.stats.expectedAmber }}</td>
                    <td id="diff_expectedAmber" style="width: 1px;" class="comparison_stat text-nowrap text-end"></td>
                    <td id="other_deck_expectedAmber" style="width: 1px;">
                </tr>
                <tr>
                    <td>{{ 'deck_comparison.amberControl'|trans }}</td>
                    <td class="text-end">{{ deck.stats.amberControl }}</td>
                    <td id="diff_amberControl" style="width: 1px;" class="comparison_stat text-nowrap text-end"></td>
                    <td id="other_deck_amberControl" style="width: 1px;">
                </tr>
                <tr>
                    <td>{{ 'deck_comparison.creatureControl'|trans }}</td>
                    <td class="text-end">{{ deck.stats.creatureControl }}</td>
                    <td id="diff_creatureControl" style="width: 1px;" class="comparison_stat text-nowrap text-end"></td>
                    <td id="other_deck_creatureControl" style="width: 1px;">
                </tr>
                <tr>
                    <td>{{ 'deck_comparison.artifactControl'|trans }}</td>
                    <td class="text-end">{{ deck.stats.artifactControl }}</td>
                    <td id="diff_artifactControl" style="width: 1px;" class="comparison_stat text-nowrap text-end"></td>
                    <td id="other_deck_artifactControl" style="width: 1px;">
                </tr>
                <tr>
                    <td>{{ 'deck_comparison.creatureCount'|trans }}</td>
                    <td class="text-end">{{ deck.stats.creatureCount }}</td>
                    <td id="diff_creatureCount" style="width: 1px;" class="comparison_stat text-nowrap text-end"></td>
                    <td id="other_deck_creatureCount" style="width: 1px;">
                </tr>
                <tr>
                    <td>{{ 'deck_comparison.artifactCount'|trans }}</td>
                    <td class="text-end">{{ deck.stats.artifactCount }}</td>
                    <td id="diff_artifactCount" style="width: 1px;" class="comparison_stat text-nowrap text-end"></td>
                    <td id="other_deck_artifactCount" style="width: 1px;">
                </tr>
                <tr>
                    <td>{{ 'deck_comparison.efficiency'|trans }}</td>
                    <td class="text-end">{{ deck.stats.efficiency }}</td>
                    <td id="diff_efficiency" style="width: 1px;" class="comparison_stat text-nowrap text-end"></td>
                    <td id="other_deck_efficiency" style="width: 1px;">
                </tr>
                <tr>
                    <td>{{ 'deck_comparison.disruption'|trans }}</td>
                    <td class="text-end">{{ deck.stats.disruption }}</td>
                    <td id="diff_disruption" style="width: 1px;" class="comparison_stat text-nowrap text-end"></td>
                    <td id="other_deck_disruption" style="width: 1px;">
                </tr>
                <tr>
                    <td>{{ 'deck_comparison.recursion'|trans }}</td>
                    <td class="text-end">{{ deck.stats.recursion }}</td>
                    <td id="diff_recursion" style="width: 1px;" class="comparison_stat text-nowrap text-end"></td>
                    <td id="other_deck_recursion" style="width: 1px;">
                </tr>
                <tr>
                    <td>{{ 'deck_comparison.other'|trans }}</td>
                    <td class="text-end">{{ deck.stats.other }}</td>
                    <td id="diff_other" style="width: 1px;" class="comparison_stat text-nowrap text-end"></td>
                    <td id="other_deck_other" style="width: 1px;">
                </tr>
                <tr>
                    <td>{{ 'deck_comparison.effectivePower'|trans }}</td>
                    <td class="text-end">{{ deck.stats.effectivePower }}</td>
                    <td id="diff_effectivePower" style="width: 1px;" class="comparison_stat text-nowrap text-end"></td>
                    <td id="other_deck_effectivePower" style="width: 1px;">
                </tr>
                <tr>
                    <td>{{ 'deck_comparison.aerc'|trans }}</td>
                    <td class="text-end">{{ deck.stats.aercScore }}</td>
                    <td id="diff_aerc" style="width: 1px;" class="comparison_stat text-nowrap text-end"></td>
                    <td id="other_deck_aerc" style="width: 1px;">
                </tr>
                <tr>
                    <td>{{ 'deck_comparison.synergy'|trans }}</td>
                    <td class="text-end">{{ deck.stats.synergyRating - deck.stats.antiSynergyRating }}</td>
                    <td id="diff_synergy" style="width: 1px;" class="comparison_stat text-nowrap text-end"></td>
                    <td id="other_deck_synergy" style="width: 1px;">
                </tr>
                <tr>
                    <td>{{ 'deck_comparison.bonusAmber'|trans }}</td>
                    <td class="text-end">{{ deck.stats.rawAmber }}</td>
                    <td id="diff_bonusAmber" style="width: 1px;" class="comparison_stat text-nowrap text-end"></td>
                    <td id="other_deck_bonusAmber" style="width: 1px;">
                </tr>
            </table>
        </div>
    </div>

    <script>
        $('select').on('select2:open', function(e) {
            const select2 = $(e.target).data('select2');

            $('.select2-search--dropdown .select2-search__field').attr('placeholder', '{{ 'menu.type_to_seach'|trans }}');

            if (!select2.options.get('multiple')) {
                select2.dropdown.$search.get(0).focus();
            }
        });

        let cachedDecks = [];

        $('#deck_compare_to').select2({
            ajax: {
                url: '{{ path('keyforge_decks_json') }}',
                minimumInputLength: 3,
                data: function (params) {
                    let query = {
                        search: {
                            'value': params.term,
                        },
                        'length': 20,
                    };

                    if ('' === params.term || undefined === params.term) {
                        query.extraFilterOnlyOwned = true;
                        query.extraFilterOnlyFriends = true;

                        {% if is_granted('ROLE_KEYFORGE') %}
                        query.extraFilterOwner = '{{ app.user.id }}';
                        {% endif %}
                    }

                    return query;
                },
                processResults: function (data) {
                    cachedDecks = [];

                    $.each(data.data, function(i, d) {
                        data.data[i]['text'] = d.name;
                        cachedDecks[d.id] = d;
                    });

                    return {
                        results: data.data
                    };
                }
            }
        });

        $('#deck_compare_to').change(function () {
            deck = cachedDecks[$('#deck_compare_to')[0].value] ?? null;

            if (null === deck) {
                $( ".comparison_stat" ).each( function () {
                    $(this)[0].innerText = '';
                });
                return;
            }

            $('#diff_sas')[0].innerText = ({{ deck.stats.sas }} - deck.stats.sas).toFixed(0);
            $('#diff_expectedAmber')[0].innerText = ({{ deck.stats.expectedAmber }} - deck.stats.expectedAmber).toFixed(1);
            $('#diff_amberControl')[0].innerText = ({{ deck.stats.amberControl }} - deck.stats.amberControl).toFixed(1);
            $('#diff_creatureControl')[0].innerText = ({{ deck.stats.creatureControl }} - deck.stats.creatureControl).toFixed(1);
            $('#diff_artifactControl')[0].innerText = ({{ deck.stats.artifactControl }} - deck.stats.artifactControl).toFixed(1);
            $('#diff_creatureCount')[0].innerText = ({{ deck.stats.creatureCount }} - deck.stats.creatureCount).toFixed(0);
            $('#diff_artifactCount')[0].innerText = ({{ deck.stats.artifactCount }} - deck.stats.artifactCount).toFixed(0);
            $('#diff_efficiency')[0].innerText = ({{ deck.stats.efficiency }} - deck.stats.efficiency).toFixed(1);
            $('#diff_disruption')[0].innerText = ({{ deck.stats.disruption }} - deck.stats.disruption).toFixed(1);
            $('#diff_recursion')[0].innerText = ({{ deck.stats.recursion }} - deck.stats.recursion).toFixed(1);
            $('#diff_other')[0].innerText = ({{ deck.stats.other }} - deck.stats.other).toFixed(1);
            $('#diff_effectivePower')[0].innerText = ({{ deck.stats.effectivePower }} - deck.stats.effectivePower).toFixed(0);
            $('#diff_aerc')[0].innerText = ({{ deck.stats.aercScore }} - deck.stats.aercScore).toFixed(0);
            $('#diff_synergy')[0].innerText = ({{ deck.stats.synergyRating - deck.stats.antiSynergyRating }} - (deck.stats.synergyRating - deck.stats.antiSynergyRating)).toFixed(0);
            $('#diff_bonusAmber')[0].innerText = ({{deck.stats.rawAmber}} - deck.stats.rawAmber).toFixed(0);

            $('#other_deck_set')[0].innerText = deck.set;
            $('#other_deck_sas')[0].innerText = deck.stats.sas;
            $('#other_deck_expectedAmber')[0].innerText = deck.stats.expectedAmber;
            $('#other_deck_amberControl')[0].innerText = deck.stats.amberControl;
            $('#other_deck_creatureControl')[0].innerText = deck.stats.creatureControl;
            $('#other_deck_artifactControl')[0].innerText = deck.stats.artifactControl;
            $('#other_deck_creatureCount')[0].innerText = deck.stats.creatureCount;
            $('#other_deck_artifactCount')[0].innerText = deck.stats.artifactCount;
            $('#other_deck_efficiency')[0].innerText = deck.stats.efficiency;
            $('#other_deck_disruption')[0].innerText = deck.stats.disruption;
            $('#other_deck_recursion')[0].innerText = deck.stats.recursion;
            $('#other_deck_other')[0].innerText = deck.stats.other;
            $('#other_deck_effectivePower')[0].innerText = deck.stats.effectivePower;
            $('#other_deck_aerc')[0].innerText = deck.stats.aercScore;
            $('#other_deck_synergy')[0].innerText = deck.stats.synergyRating - deck.stats.antiSynergyRating;
            $('#other_deck_bonusAmber')[0].innerText = deck.stats.rawAmber;

            $( ".comparison_stat" ).each( function () {
                let value = Number($(this)[0].innerText);

                if (value > 0) {
                    $(this)[0].innerHTML = $(this)[0].innerText + '<i class="bi bi-chevron-double-up" style="color:green; font-size: 1em;"></i>';
                }

                if (value < 0) {
                    $(this)[0].innerHTML = $(this)[0].innerText + '<i class="bi bi-chevron-double-down" style="color:red; font-size: 1em;"></i>';
                }

                if (value === 0) {
                    $(this)[0].innerHTML = '';
                }
            });
        });

        let deckCardTypes = JSON.parse('{{ deck_card_types|json_encode|raw }}');

        const deckCardTypesChart = new Chart(document.getElementById('deck_card_types').getContext('2d'), {
            type: 'doughnut',
            data: {
                datasets: [
                    {
                        data: Object.values(deckCardTypes),
                        backgroundColor: [
                            'rgb(41, 128, 185)',
                            'rgb(161,29,44)',
                            'rgb(255,145,0)',
                            'rgb(109,175,41)',
                        ],
                    }
                ],
                labels: Object.keys(deckCardTypes),
            },
            options: {
                responsive: true,
                aspectRatio: 2,
                plugins: {
                    legend: {
                        display: true,
                        position: 'bottom',
                    },
                    title: {
                        display: false,
                    }
                }
            },
        });

        let deckBellCurves = JSON.parse('{{ bell_curve|json_encode|raw }}');

        const maxSasRounded = Math.ceil(Math.max(...Object.values(deckBellCurves.sas)) / 10) * 10;
        const maxExpectedRounded = Math.ceil(Math.max(...Object.values(deckBellCurves.expected_amber)) / 10) * 10;
        const maxAmberControlRounded = Math.ceil(Math.max(...Object.values(deckBellCurves.amber_control)) / 10) * 10;
        const maxCreatureControlRounded = Math.ceil(Math.max(...Object.values(deckBellCurves.creature_control)) / 10) * 10;
        const maxArtifactControlRounded = Math.ceil(Math.max(...Object.values(deckBellCurves.artifact_control)) / 10) * 10;

        barGraph('sas', maxSasRounded, deckBellCurves.sas, '{{ deck.stats.sas }}');
        barGraph('expected_amber', maxExpectedRounded, deckBellCurves.expected_amber, '{{ deck.stats.expectedAmber|round(0) }}');
        barGraph('amber_control', maxAmberControlRounded, deckBellCurves.amber_control, '{{ deck.stats.amberControl|round(0) }}');
        barGraph('creature_control', maxCreatureControlRounded, deckBellCurves.creature_control, '{{ deck.stats.creatureControl|round(0) }}');
        barGraph('artifact_control', maxArtifactControlRounded, deckBellCurves.artifact_control, '{{ deck.stats.artifactControl|round(0) }}');

        function barGraph(stat, max, curveStat, highlightedKey) {
            const color1 = 'rgb(37, 41, 33)';
            const color2 = 'rgb(255, 193, 7)';

            let barColors = [];

            for (const [key, value] of Object.entries(curveStat)) {
                if (key === highlightedKey) {
                    barColors.push(color2);
                } else {
                    barColors.push(color1);
                }
            }

            new Chart(document.getElementById('deck_stats_comparison_' + stat).getContext('2d'), {
                type: 'bar',
                data: {
                    labels: Object.keys(curveStat),
                    datasets: [
                        {
                            data: Object.values(curveStat),
                            borderColor: 'rgb(37, 41, 33)',
                            backgroundColor: barColors,
                            maxBarThickness: 50,
                            yAxisID: 'percentage',
                        },
                    ]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            display: false,
                        },
                        title: {
                            display: false,
                        }
                    },
                    scale: {
                        ticks: {
                            precision: 0,
                        },
                    },
                    scales: {
                        percentage: {
                            type: 'linear',
                            display: true,
                            position: 'left',
                            min: 0,
                            max: max,
                            grid: {
                                drawOnChartArea: true,
                            },
                            stacked: false,
                        },
                        count: {
                            type: 'linear',
                            display: true,
                            position: 'right',
                            grid: {
                                drawOnChartArea: true,
                            },
                            stacked: false,
                        },
                    },
                },
            });
        }

        $('#deck_compare_stats').change(function () {
            $('.deck_stats_comparison').hide();
            $('#deck_stats_comparison_' + $('#deck_compare_stats')[0].value).show();
        });
    </script>
</div>
